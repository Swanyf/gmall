1)目标：
	将skuInfo的数据导入到es中

	实现：
		1、先查询三级分类下的所有skuInfo的数据
		2、将skuInfo的数据封装到skuLsInfo对象中
				如果是以前，我们需要遍历skuInfo的数据，然后new 一个
				SkuLsInfo的对象，再一个个的skuLsInfo.setxx(xx)进去，
				这里使用BeanUtils.copyProperties(xxx,xxx)可以代替上面的
				复杂操作，表示：将skuInfo封装到skuLsInfo中，原则是属性同名封装
		3、导入到es中
				Index.Builder()		// 导入方法


创建DSL的查询语句的数据结构
	用于检索的字段就生成索引(index : true),不设置默认为true

	一般查询es数据的时候都会调用一个工具方法，用工具方法生
	new Search.Builder(query的DSL语句)

进入list页面需要获取当前的catalog3Id

2)目标：
	页面上显示商品信息(图片、价格、描述...)
		skuLsParam是入参的对象，也就是各种查询的条件参数，
		根据这对象查询skuLsInfo的对象数据存放到域中

目标：
	显示分类列表

	实现：
		1、获取skuLsInfo中的数据
		2、遍历获取到valueId
		3、分类列表的属性名和属性值一定是页面上商品信息所共同包含的交集部分
			所以需要对valueId进行去重
		4、将遍历获取到valueId封装到set集合中
		5、StringUtils.join 分割字符串得到每一个char类型的字符
		6、根据分割后的字符串查询base_attr_info、base_attr_value表数据
		7、将数据封装到model域中

3)目标：
	点击某个属性值时，该属性会从分类列表中消失，在一块儿属性值栏中显示，
	属性值就相当于面包屑。
	面包屑参数 = 浏览器重新发送的get请求参数
	分类列表 = 总属性列表 - 面包屑的属性

	点击属性值栏时的某个属性值时，属性值消失，重新在分类列表中显示，
	面包屑的请求 = 浏览器的get请求参数 - 当前点击的面包屑参数

	实现：
		1、每点击一次相当于重新发送一个同步请求
		2、根据当前入参的参数SkuLsParam获取内部属性可以生成一个get请求的参数串
		3、调用一个外部工具方法获取拼接后的get请求参数串
		4、需要先做判空校验，防止出现&符号在前
		5、分类列表需要显示所有的数据，设置es的from和size

4)目标：
	解决点击属性值后不从列表中消失的bug，去掉已经提交的属性

	实现：
		1、利用iterator特性，将参数请求的valueId和列表中的id比较
		2、如果 相等，就将列表中的valueId移除


		一级分类id
			一级分类id
			二级分类id
			二级分类名称
			三级分类列表
				二级分类id、
				三级id
				三级名称

5)目标：
	面包屑属性栏功能
		点击属性列表中的属性，消失，该属性在面包屑属性栏区域显示，
		点击面包屑属性栏中的属性，消失，重新在属性列表中显示

	实现：
		1、当面包屑的请求参数不等于地址栏中的面包屑请求参数，就拼接地址
